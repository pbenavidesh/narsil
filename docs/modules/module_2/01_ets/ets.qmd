---
title: "Exponential smoothing"
format:
  html: default
  revealjs:
    output-file: ets_pres.html
---


```{r}
#| label: pkgs
#| message: false
#| include: false

library(tidyverse)
library(fpp3)
```


:::{.content-hidden unless-format="revealjs"}

## {auto-animate=true}
::: {.r-hstack style="justify-content:space-between; align-items:center; margin-top:50px;"}
::: {data-id="mean"  style="background:#2F855A; color:white; padding:10px 14px; border-radius:12px;"}
**Mean**  
$$
\hat y_{T+1\mid T}=\tfrac{1}{T}\sum_{i=1}^T y_i
$$

:::

::: {data-id="axis" style="flex:1; height:10px; margin:0 16px; border-radius:6px; background: linear-gradient(90deg,#2F855A,#2CA1C2,#C0392B);"} 
:::

::: {data-id="naive" style="background:#C0392B; color:white; padding:10px 14px; border-radius:12px;"}
**Naïve**  
$$
\hat y_{T+1\mid T}=y_T
$$

:::
:::



:::{.notes}
In the *mean* method, all observations are weighted equally (all have the same importance), while in the *naïve* method, only the most recent observation is used for forecasting. (we ignore all previous observations).
:::

## {auto-animate=true}
::: {.r-hstack style="justify-content:space-between; align-items:center; margin-top:50px;"}
::: {data-id="mean"  style="background:#2F855A; color:white; padding:10px 14px; border-radius:12px; opacity:.9;"}
**Mean** 
:::

::: {data-id="axis" style="flex:1; height:10px; margin:0 16px; border-radius:6px; background: linear-gradient(90deg,#2F855A,#2CA1C2,#C0392B);"} 
:::

::: {data-id="naive" style="background:#C0392B; color:white; padding:10px 14px; border-radius:12px; opacity:.9;"} 
**Naïve** 
:::

::: {data-id="ets" style="position:absolute; left:50%; transform:translateX(-50%); top:20%; background:#2CA1C2; color:white; padding:16px 20px; border-radius:14px; box-shadow:0 6px 18px #0006;"}
**Exponential Smoothing**  
$$
\hat y_{T+1\mid T}=\alpha y_T +  \alpha(1-\alpha)y_{T-1} + \ldots 
$$  

- $\alpha \approx 1$: naïve-like

- $\alpha \approx 0$: mean-like


:::
:::

:::

:::{.notes}

- Exponential smoothing methods are still relatively simple: they're simply weighted averages from historical data. 
  - However, these forecasting methods are widely used in practice, and they can be very effective.

- The exponential smoothing method is a compromise between the mean and naïve methods. It uses all historical data, but it assigns exponentially decreasing weights to older observations. 

- The smoothing parameter $\alpha$ controls the rate of decrease: 
  - when $\alpha$ is close to 1, the method behaves like the naïve method, giving more weight to recent observations; 
  - when $\alpha$ is close to 0, it behaves like the mean method, giving more equal weight to all observations.

:::

:::{.content-hidden unless-format="revealjs"}
##
:::

$$
\hat{y}_{T+1 | T}= \alpha y_{T} + \alpha(1-\alpha) y_{T-1} + \alpha(1-\alpha)^{2} y_{T-2} + \alpha(1-\alpha)^{3} y_{T-3} + \ldots
$$

where $0\leq \alpha \leq1$ is the smoothing parameter.



Table: Weights for different values of $\alpha$ {#tbl-ets_alpha_weights}

|              | $\alpha = 0.2$ | $\alpha = 0.4$ | $\alpha = 0.6$ | $\alpha = 0.8$ |
|--------------|:--------------:|:--------------:|:--------------:|:--------------:|
| $y_t$        | 0.2000         | 0.4000         | 0.6000         | 0.8000         |
| $y_{t-1}$    | 0.1600         | 0.2400         | 0.2400         | 0.1600         |
| $y_{t-2}$    | 0.1280         | 0.1440         | 0.0960         | 0.0320         |
| $y_{t-3}$    | 0.1024         | 0.0864         | 0.0384         | 0.0064         |
| $y_{t-4}$    | 0.0819         | 0.0518         | 0.0154         | 0.0013         |
| $y_{t-5}$    | 0.0655         | 0.0311         | 0.0061         | 0.0003         |



:::{.notes}
- $\alpha$ can be thought of as the *memory* of the time series: The smaller the value of $\alpha$, the longer the memory (i.e., the more past observations are taken into account). 

- Conversely, a larger value of $\alpha$ means a shorter memory, with more emphasis on recent observations. See @tbl-ets_alpha_weights for some examples.
:::

# Exponential smoothing methods

## Simple exponential smoothing (SES)

$$
\begin{aligned}
\text{Forecast equation} \quad & \hat{y}_{t+h|t} = \ell_t \\
\text{Smoothing equation} \quad & \ell_t = \alpha y_t + (1-\alpha)\ell_{t-1}
\end{aligned}
$$

where $\ell_t$ is the level at time $t$.

:::{.callout-note appearance="simple"}
SES has a flat forecast function, so it is appropriate for data with **no trend** or **seasonal** pattern.
:::

---

```{r}
#| label: ses

algeria_economy <- global_economy |>
  filter(Country == "Algeria")

alg_fit <- algeria_economy |>
  model(
    ets = ETS(Exports ~ error("A") + trend("N") + season("N"))
  )

alg_fc <- alg_fit |>
  forecast(h = 5)
```

```{r}
#| label: ses-plot
#| echo: false

alg_fc |> 
  autoplot(algeria_economy) +
  geom_line(aes(y = .fitted), col="darkorange",
            data = augment(alg_fit)) +
  labs(y = "% of GDP", title = "Exports: Algeria") +
  guides(colour = "none")
```

::: {.content-hidden unless format="revealjs"}
# Methods with trend
:::

::: {.content-visible unless format="revealjs"}
## Methods with trend
:::


