---
title: "RStudio, R, and Time Series"
format:
  html: default
  revealjs:
    output-file: r_time_series_pres.html
---

# Packages

## The `tidyverse`

```{r}
#| label: pkg_tidyverse
#| message: true

library(tidyverse)
```

- `tidyverse` is a meta-package that loads the core packages of the [tidyverse](https://tidyverse.org/).

:::{.notes}

We will always load all the required packages a the beginning of the document. When loading the `tidyverse`, it shows which packages are being attached, as well as any conflicts with previously loaded packages.

:::{.callout-note collapse="true"}
## Core packages

- [`dplyr`](https://dplyr.tidyverse.org/) is the core package for **data transformation**. It is paired up with the following packages for specific column types:
  - [`stringr`](https://stringr.tidyverse.org/) for strings.
  - [`forcats`](https://forcats.tidyverse.org/) for **factors** (R's categorical data type).
  - [`lubridate`](https://lubridate.tidyverse.org/) for dates and date-times.
  - [`ggplot2`](https://ggplot2.tidyverse.org/) is the primary package for visualization.

:::

:::

## The `tidyverts`

```{r}
#| label: pkg_fpp3
#| message: true

library(fpp3)
```

- `fpp3` is also a meta-package that load the [tidyverts](https://tidyverts.org/) ecosystem for time series analysis and forecasting. 

:::{.notes}

The `tidyverts` packages are made to work seamlessly with the `tidyverse`.

:::{.callout-note collapse="true"}
 
- [`tsibble`](https://tsibble.tidyverts.org/) is the main data structure we will use to analyze and model time series. It is a **t**ime **series** t**ibble**.
- [`feasts`](https://feasts.tidyverts.org/) provides many functions and tools for feature and statistics extraction for time series.
- [`fable`](https://fable.tidyverts.org/) is the core package for modeling and foreasting time series.

:::

:::

# Time Series

## `tsibble` objects

Let's take a look at tourism in Australia:

```{r}
#| label: tourism_tsibble
#| paged-print: false
tourism
```

:::{.notes}

A `tsibble` is a modified version of a [`tibble`](https://tibble.tidyverse.org/index.html) as to 

:::

```{r}
key_vars(tourism)
key_data(tourism)
```


:::{.notes}

The `tsibble` has `{r} nrow(tourism)` rows and `{r} ncol(tourism)` columns. It shows quarterly data^[shown besides the tsibble dimension as `[1Q]`] on tourism across Australia. It's divided by Region, State, and purspose of the trip^[these are specified in the `key` argument. This tsibble contains ]. How many different states are there?

:::

## Australian States

```{r}
#| label: distinct_states

distinct(tourism, State)
```

## Which regions are located in Tasmania?

```{r}
#| label: distinct_regions

distinct(filter(tourism, State == "Tasmania"),Region)
```

## Data Transformation: Average trips

To get the average trips by purpose, we need to do the following:

:::{.incremental}

1) Filter the original `tsibble` to get only the data from East Coast, Tasmania.
1) Convert the data to a `tibble`.
1) Group by purpose.
1) Summarise by getting the mean of the trips.

:::

## {auto-animate="true"}

With traditional code, this would look something like:

```{r}
#| label: no_pipe_summarise
#| eval: false

summarise(group_by(as_tibble(filter(tourism, State == "Tasmania", 
                                    Region == "East Coast")), Purpose),
          mean_trips = mean(Trips))
```

:::{.notes}
:::{.callout-note collapse="true"}
## Order of code execution
Note that this code must be read inside-out. This makes it harder to understand, and also harder to debug.
:::
:::

:::{.content-hidden unless-format="revealjs"}

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_1
#| eval: false

tourism |>                          
  filter() 
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_2
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_3
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
  as_tibble() |>
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_4
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
  as_tibble() |>                    
  group_by() 
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_5
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
  as_tibble() |>                    
  group_by(Purpose) |>
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_6
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
  as_tibble() |>                    
  group_by(Purpose) |>              
  summarise(mean_trips = )
```

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_7
#| eval: false

tourism |>                          
  filter(State == "Tasmania",       
         Region == "East Coast") |> 
  as_tibble() |>                    
  group_by(Purpose) |>              
  summarise(mean_trips = mean(Trips))
```

:::

## {auto-animate="true"}

Using the native pipe operator; ` |> `, we can improve the same code:

```{r}
#| label: pipe_summarise_full

tourism |>                            # <1>
  filter(State == "Tasmania",         # <2>
         Region == "East Coast") |>   # <2>
  as_tibble() |>                      # <3>
  group_by(Purpose) |>                # <4>
  summarise(mean_trips = mean(Trips)) # <5>
```

1. Take the tsibble `tourism`, *then*
2. filter by State and Region, *then*
3. convert to a `tibble`, *then*
4. group the tibble by purpose, *then*
5. summarise by taking the mean trips

:::{.notes}
:::{.callout-tip collapse="true"}
## The pipe operator |> 

The pipe is read as "**then**", and it allows us to write code in the order it's supposed to be run.

It also helps to debug code easier, because you can run each function in order and see where the error is.
:::
:::
# TS Visualization

## Plotting tourism across time

```{r}
#| label: ts_viz

tourism |> 
  filter(State == "Tasmania",
         Region == "East Coast") |> 
  autoplot(Trips) +                             # <1>
  facet_wrap(vars(Purpose), scale = "free_y") + # <2>
  theme(legend.position = "none")               # <3>
```

1. `autoplot()` detects the data automatically and proposes a plot accordingly.
2. `facet_wrap()` Divides a plot into subplots (facets).
3. you can customize endless feautres using `theme()`. Here, we remove the legend, as it's redudant.

## Time plots

```{r}
#| label: time_plot
#| code-line-numbers: "2-3"

aus_production |> 
  autoplot(Gas) +
  geom_point()
```

:::{.notes}

These are the most basic type of plots. We have the time variable in the $x$-axis, and our forecast variable in the $y$-axis. Time plots should be line plots, and can include or not points.

:::

## Seasonal Plots

```{r}
#| label: gg_season
#| code-line-numbers: "2"

aus_production |> 
  gg_season(Gas)
```

:::{.notes}

The data here are plotted against a single "season". It's useful in identifying years with changes in patterns. 

:::

Removing the trend from the data:

```{r}
#| label: gg_season2
#| echo: false

aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |>
  mutate(sin_tend = season_year + remainder) |> 
  gg_season(sin_tend)
```


## Seasonal Subseries Plots

```{r}
#| label: gg_subseries
#| code-line-numbers: "2"

aus_production |> 
  gg_subseries(Gas)
```

:::{.notes}

Here we split the plot into many subplots, one for each season. This helps us see clearly the underlying seasonal pattern. The mean for each season is represented as the blue horizontal line.

:::

## `gg_tsdisplay()`

```{r}
#| label: gg_tsdisplay
#| code-line-numbers: "2"

aus_production |> 
  gg_tsdisplay(Gas, plot_type = "season")
```

:::{.notes}

This function provides a convenient way to have 3 plots: a time plot, an ACF plot, and a third option that can be customized with one of the following plot types:

:::{.callout-tip collapse="true"}
## `plot_type` options

- "auto", 
- "partial", 
- "season", 
- "histogram", 
- "scatter", 
- "spectrum"

:::


## Exporting data to .csv

```{r}
#| label: write_csv
#| eval: false

tourism |> 
  filter(State == "Tasmania",
         Region == "East Coast") |> 
  mutate(Quarter = as.Date(Quarter)) |> 
  write_csv("./datos/tasmania.csv")
```

:::{.notes}
You can export to .csv by providing a `tsibble` or `tibble` (or any other type of data frame), by calling **`write_csv()`**, and specifying the output file's name.
:::

