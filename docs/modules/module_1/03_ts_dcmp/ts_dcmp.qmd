---
title: "Time Series Decomposition"
format:
  html:
    other-links: 
      - text: Guerrero feature
        href: https://github.com/pbenavidesh/narsil/blob/main/docs/bib/guerrero1993.pdf
  revealjs:
    output-file: ts_dcmp_pres.html
---

:::{.content-visible unless-format="revealjs"}

```{r}
#| label: pkgs
#| message: false

library(tidyverse)
library(fpp3)
library(tidyquant)
library(plotly)
```

:::

# TS Features & Patterns

## 

```{r}
#| label: ts-examples
#| echo: false
#| message: false
#| layout-ncol: 2

p1 <- tq_get("FARTCOIN-USD", from = "2024-01-01") |> 
  as_tsibble(index = date) |>
  autoplot(close, color = "navyblue") +
  labs(
    title = "Fartcoin",
    y = "USD",
    caption = "Source: Yahoo Finance"
  )

ggplotly(p1) |> 
  bslib::card(full_screen = TRUE)

p2 <- tq_get(
  "MEXLOCOEMORSTM",
  get = "economic.data",
  from = "1985-01-01"
) |>
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = date) |> 
  autoplot(price, color = "orchid") +
  labs(
    title = "Employment and Unemployment: Original Series for Mexico",
    y = "Percent",
    caption = "Source: Organization for Economic Co-operation and Development via FRED"
  ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) 
 
ggplotly(p2, dynamicTicks = TRUE) |> 
  bslib::card(full_screen = TRUE)

p3 <- us_employment |>
  filter_index("1960 Jan." ~ .) |> 
  filter(Title == "Mining and Logging") |> 
  autoplot(color = "indianred1") +
  labs(
    title = "Mining and Logging Employment in the US",
    y = "Thousands of persons employed",
    caption = "Source = U.S. Bureau of Labor Statistics"
  )

ggplotly(p3, dynamicTicks = TRUE) |> 
  bslib::card(full_screen = TRUE)

p4 <- tq_get(
  "MEXSLRTTO01IXOBM",
  get = "economic.data",
  from = "1985-01-01"
) |>
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = date) |> 
  autoplot(price, color = "springgreen4") +
  labs(
    title = "Retail Trade, Except of Motor Vehicles and Motorcycles for Mexico",
    y = "Index 2015=100",
    caption = "Organization for Economic Co-operation and Development via FRED"
  ) 
 
ggplotly(p4, dynamicTicks = TRUE)  |> 
  bslib::card(full_screen = TRUE)
```

:::{.notes}
All these time series have different shapes, patterns, and so on. 

:::

## TS Patterns

Time series can have distinct patterns:

:::{.incremental}

- **Trend:** A long-term increase/decrease in the data.

- **Seasonal:** Fluctuations in the time series with a fixed and known period^[A time series can have multiple seasonal patterns.].

- **Cycles:** More commonly known as "Business cycles", refer to rises and falls that are not of a fixed frequency^[They usually last at least 2 years.].

- **Changes in variability:** Changes in the spread of the data over time, i. e., an increase/decrease in the variance as the level of the series increases/decreases.

:::


## Components of a Time Series

A time series can be decomposed into the following components:

:::{.incremental}

- **Seasonal component (S):** The repeating short-term cycle in the series.

- **Trend-cycle component (T):** The long-term progression of the series.

- **Residual component (R):** The residuals or "noise" left after removing the seasonal and trend-cycle components.

:::

# Mathematical Transformations

## Log transformations

:::{.panel-tabset}

### Series in levels

```{r}
#| label: jj_levels
#| echo: false
#| message: false

jj <- JohnsonJohnson |> 
  as_tsibble()

p <- jj |> 
  autoplot() +
    ggtitle("J&J - Quarterly Sales")

ggplotly(p)

```

:::{.notes}

:::{.callout-note appearance="simple"}

Transformations and adjustments help us simplify the patterns in our data, and can improve our forecasts' accuracy.

:::

:::

### Log


```{r}
#| label: jj_log
#| echo: false
#| message: false

p <- jj |> 
  autoplot(log(value)) +
  ggtitle("J&J - Quarterly Sales")

ggplotly(p)
```

:::{.notes}

- Log transformations are often useful when the data presents an increasing/decreasing variation with the level of the series.

- Log transformations are very interpretable: changes in a log value are percent changes on the original scale.

:::


:::

## Box-Cox transformations


$$
w_t= \begin{cases}\log \left(y_t\right) & \text { if } \lambda=0 \\ \left(\operatorname{sign}\left(y_t\right)\left|y_t\right|^\lambda-1\right) / \lambda & \text { otherwise }\end{cases}
$$

:::{.notes}

In a Box-Cox transformation, the log is always a natural logarithm. The other case is just a power transformation with scaling.

:::


*What happens when $\lambda = 1$?*

:::{.callout-tip appearance="simple"}
You should choose a value of $\lambda$ that makes the size of the seasonal variation the same throughout the series.
:::

## How can we choose the value of $\lambda$?

We can use the `guerrero` feature to choose an optimal lambda.

```{r}
#| label: lambda_guerrero
#| code-line-numbers: "|2"
#| paged-print: false

aus_production |> 
  features(Gas, features = guerrero)
```




## Calendar adjustments



# Time Series Decomposition

## Types of Decompositions

:::{.notes}

A decomposition splits the time series into its underlying components:

- Trend-cycle
- Seasonal pattern(s)

And what's left of it we simply call it a "remainder component".

In general, there are two types of decompositions:
:::

:::{.incremental}

### Additive decomposition

$$
Y_t = T_t + S_t + R_t
$$

### Multiplicative decomposition

$$
Y_t = T_t \times S_t \times R_t \\
$$


- *Which one should you use?*



:::



# Benchmark Forecasting Methods

# Residual Diagnostics



## Portmanteau Tests of Autocorrelation
