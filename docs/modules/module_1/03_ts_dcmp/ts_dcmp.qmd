---
title: "Time Series Decomposition"
draft: true
format:
  html: default
  revealjs:
    output-file: r_time_series_pres.html
---

:::{.content-visible unless-format="revealjs"}

```{r}
#| label: pkgs
#| message: false

library(tidyverse)
library(fpp3)
library(tidyquant)
library(plotly)
```

:::

# TS Features & Patterns

## 

```{r}
#| label: ts-examples
#| echo: false
#| message: false
#| layout-ncol: 2

p1 <- tq_get("FARTCOIN-USD", from = "2024-01-01") |> 
  as_tsibble(index = date) |>
  autoplot(close, color = "navyblue") +
  labs(
    title = "Fartcoin",
    y = "USD",
    caption = "Source: Yahoo Finance"
  )

ggplotly(p1)  

p2 <- tq_get(
  "MEXLOCOEMORSTM",
  get = "economic.data",
  from = "1985-01-01"
) |>
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = date) |> 
  autoplot(price, color = "orchid") +
  labs(
    title = "Employment and Unemployment: Original Series for Mexico",
    y = "Percent",
    caption = "Source: Organization for Economic Co-operation and Development via FRED"
  ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) 
 
ggplotly(p2, dynamicTicks = TRUE)

p3 <- us_employment |>
  filter_index("1960 Jan." ~ .) |> 
  filter(Title == "Mining and Logging") |> 
  autoplot(color = "indianred1") +
  labs(
    title = "Mining and Logging Employment in the US",
    y = "Thousands of persons employed",
    caption = "Source = U.S. Bureau of Labor Statistics"
  )

ggplotly(p3, dynamicTicks = TRUE)

p4 <- tq_get(
  "MEXSLRTTO01IXOBM",
  get = "economic.data",
  from = "1985-01-01"
) |>
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = date) |> 
  autoplot(price, color = "springgreen4") +
  labs(
    title = "Retail Trade, Except of Motor Vehicles and Motorcycles for Mexico",
    y = "Index 2015=100",
    caption = "Organization for Economic Co-operation and Development via FRED"
  ) 
 
ggplotly(p4, dynamicTicks = TRUE)  
```

:::{.notes}
All these time series have different shapes, patterns, and so on. 

:::

## TS Patterns

Time series can have distinct patterns:

- **Trend:** A long-term increase/decrease in the data.

- **Seasonal:** Fluctuations in the time series with a fixed and known period^[A time series can have multiple seasonal patterns.].

- **Cycles:** More commonly known as "Business cycles", refer to rises and falls that are not of a fixed frequency^[They usually last at least 2 years.].



# Time Series Visualization

## Time plots

```{r}
#| label: time_plot
#| code-line-numbers: "2-3"

aus_production |> 
  autoplot(Gas) +
  geom_point()
```

:::{.notes}

These are the most basic type of plots. We have the time variable in the $x$-axis, and our forecast variable in the $y$-axis. Time plots should be line plots, and can include or not points.

:::

## Seasonal Plots

```{r}
#| label: gg_season
#| code-line-numbers: "2"

aus_production |> 
  gg_season(Gas)
```

:::{.notes}

The data here are plotted against a single "season". It's useful in identifying years with changes in patterns. 

:::

Removing the trend from the data:

```{r}
#| label: gg_season2
#| echo: false

aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |>
  mutate(sin_tend = season_year + remainder) |> 
  gg_season(sin_tend)
```


## Seasonal Subseries Plots

```{r}
#| label: gg_subseries
#| code-line-numbers: "2"

aus_production |> 
  gg_subseries(Gas)
```

:::{.notes}

Here we split the plot into many subplots, one for each season. This helps us see clearly the underlying seasonal pattern. The mean for each season is represented as the blue horizontal line.

:::

## `gg_tsdisplay()`

```{r}
#| label: gg_tsdisplay
#| code-line-numbers: "2"

aus_production |> 
  gg_tsdisplay(Gas, plot_type = "season")
```

:::{.notes}

This function provides a convenient way to have 3 plots: a time plot, an ACF plot, and a third option that can be customized with one of the following plot types:

:::{.callout-tip collapse="true"}
## `plot_type` options

- "auto", 
- "partial", 
- "season", 
- "histogram", 
- "scatter", 
- "spectrum"

:::

# Time Series Decomposition




# Benchmark Forecasting Methods

# Residual Diagnostics



## Portmanteau Tests of Autocorrelation
